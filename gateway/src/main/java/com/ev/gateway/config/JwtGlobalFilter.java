package com.ev.gateway.config;

import com.ev.gateway.util.JwtUtil;
import com.ev.gateway.service.RedisService;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.JwtException;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.core.Ordered;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.List;

@Component
public class JwtGlobalFilter implements GlobalFilter, Ordered {

    private final JwtUtil jwtUtil;
    private final RedisService redisService;

    // üß© Danh s√°ch path ƒë∆∞·ª£c b·ªè qua x√°c th·ª±c
    private static final List<String> EXCLUDED_PATHS = List.of(
            "/auth/",       // ƒëƒÉng nh·∫≠p, ƒëƒÉng k√Ω
            "/users/"       // public user endpoints
    );

    public JwtGlobalFilter(JwtUtil jwtUtil, RedisService redisService) {
        this.jwtUtil = jwtUtil;
        this.redisService = redisService;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        String path = exchange.getRequest().getURI().getPath();

        // ‚ö° 1Ô∏è‚É£ B·ªè qua c√°c URL n·∫±m trong danh s√°ch EXCLUDED_PATHS
        if (EXCLUDED_PATHS.stream().anyMatch(path::startsWith)) {
            return chain.filter(exchange);
        }

        // ‚ö° 2Ô∏è‚É£ L·∫•y token
        String authHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            return this.onError(exchange, "Missing Authorization header", HttpStatus.UNAUTHORIZED);
        }

        String token = authHeader.substring(7);

        try {
            // ‚ö° 3Ô∏è‚É£ Ki·ªÉm tra token c√≥ b·ªã logout trong Redis kh√¥ng
            if (redisService.contains(token)) {
                return this.onError(exchange, "Token has been logged out", HttpStatus.UNAUTHORIZED);
            }

            // ‚ö° 4Ô∏è‚É£ Gi·∫£i m√£ token
            String email = jwtUtil.extractEmail(token);
            String role = jwtUtil.extractRole(token);
            Long userId = jwtUtil.extractUserId(token);

            if (!jwtUtil.isTokenValid(token, email)) {
                return this.onError(exchange, "Invalid JWT token", HttpStatus.UNAUTHORIZED);
            }

            // ‚ö° 5Ô∏è‚É£ Th√™m th√¥ng tin ng∆∞·ªùi d√πng v√†o header ƒë·ªÉ g·ª≠i xu·ªëng service
            ServerWebExchange mutatedExchange = exchange.mutate()
                    .request(r -> r.headers(headers -> {
                        headers.add("X-User-Email", email);
                        headers.add("X-User-Role", role);
                        headers.add("X-User-Id", String.valueOf(userId));
                    }))
                    .build();

            return chain.filter(mutatedExchange);

        } catch (ExpiredJwtException e) {
            return this.onError(exchange, "Token expired", HttpStatus.UNAUTHORIZED);
        } catch (JwtException e) {
            return this.onError(exchange, "Invalid token", HttpStatus.UNAUTHORIZED);
        }
    }

    private Mono<Void> onError(ServerWebExchange exchange, String err, HttpStatus httpStatus) {
        exchange.getResponse().setStatusCode(httpStatus);
        return exchange.getResponse().setComplete();
    }

    @Override
    public int getOrder() {
        return -1; // ch·∫°y s·ªõm nh·∫•t
    }
}
